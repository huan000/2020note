<?php
/**
 * 第十一章：
 *      缓存的收益和成本：
 *      收益：加速读写
 *            降低后端负载： 后端服务器通过前端缓存降低负载：
 *                  业务端使用redis降低后端mysql负载等
 *      成本： 缓存层和数据层有时间窗口不一致，和更新策略有关
 *            代码维护成本： 多了一层缓存逻辑
 *            运维成本： 例如 redis cluster
 *
 *      使用场景：
 *          对高消耗的sql: 例如排行榜 进行缓存排行榜数据进行缓存
 *          将大量的写合并为批量写：
 *                  如计数器先redis累加在批量写db
 *
 *      缓存的更新策略：
 *                      一致性              维护成本
 *          lru：        最差                 底
 *          expire：     较差                 底
 *          主动更新：    强                  高
 *
 *              低一致性： 最大内存和淘汰策略
 *              高一致性： 超时剔除和主动更新结合，最大内存和淘汰策略兜底
 *
 *      缓存粒度的问题：
 *          1.通用性： 全量属性最好  因为未来可能会加入一些新的字段
 *          2.占用空间： 部分属性更好
 *          3.代码维护： 表面上全量属性会更好
 *
 *      缓存穿透问题：
 *          原因：
 *          1.业务代码自身的问题
 *          2.恶意攻击 爬虫攻击
 *          如何发现：
 *          1.业务的响应时间
 *          2.业务本身的问题
 *
 *          
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */